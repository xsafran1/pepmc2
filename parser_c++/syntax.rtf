NAME:   [a-zA-Z][_0-9a-zA-Z-]* ( Some name starting with upper case or lower case letter following whichever combination of letters, digits and '-' '_' characters )

NUMBER: whichever integer or real number

RAMP:	rp(*) | rm(*) | rpcoor(~) | rmcoor(~) |
        Rp(*) | Rm(*) | Rpcoor(~) | Rmcoor(~)
	* = var, theta1, theta2, a, b
	~ = var, theta1, theta2, y1, y2

SIGM:	Sp(*) | Sm(*) | Spinv(*) | Sminv(*) | Sp[~](*) | Sm[~](*) | Spinv[~](*) | Sminv[~](*) |
        sp(*) | sm(*) | spinv(*) | sminv(*) | sp[~](*) | sm[~](*) | spinv[~](*) | sminv[~](*)
	* = var, k, theta1, a, b
	~ = n

STEP:	Hp(*) | Hm(*) |
        hp(*) | hm(*)
	* = var, theta1, m

NAME - matching whichever named variable, parameter or constant
NUMBER - matching nameless constants (simply numbers)

var = variable (dimension)
thetaX = threshold

All following parameters may be represented by NAME or NUMBER:
    a,b = parameters concretizing location of ramp in space according to (y = a*x + b)
    y1,y2 = parameters exactly determining y values of end-points of ramp
    k = parameter determining steepness of sigmoid function
    n = parameter determining accuracy or gentleness of change from curve to ramps
    m = parameter determining accuracy or gentleness of steepness of step function

=======================================================


start:	            line \n | start line \n

line:               /* empty line */
                |   EQ: 	    eq_defs
                |	PARAMS: 	param_defs
                |	VARS: 	    var_defs
                |	THRES: 	    thres_defs
                |   CONSTS:     const_defs
                |   INIT:       init_defs
                |   VAR_POINTS: var_points_defs     (OPTIONAL: determines number of x points and number of segments per variable)
                |   BA:         .*                  (random string before '\n' character according to Buchi automaton definition)

var_points_defs:    var_points_def | var_points_defs ; var_points_def

var_points_def:     NAME : NUMBER , NUMBER

init_defs:          init_def | init_defs ; init_def

init_def:           NAME , NUMBER , NUMBER

const_defs:         const_def | const_defs ; const_def

const_def:          NAME , NUMBER

thres_defs:         NAME : thres_values

thres_values:		NUMBER | thres_values , NUMBER

var_defs:		    NAME | var_defs , NAME

param_defs:	        param_def | param_defs ; param_def

param_def:	        NAME , NUMBER , NUMBER

eq_defs:		    NAME = expr

ap:		            NUMBER | NAME | RAMP | SIGM | STEP

expr:               summation | ap

summation:          summant | summation + summant | summation - summant

summant:            multiplication | parenthesis

multiplication:     multiple | multiplication * multiple

multiple:           ap | parenthesis

parenthesis:        ( expr ) | [ expr ] | ( - expr )

=================================================


In equation for some variable, this variable must be written without starting 'd' symbol

default values for ramp definition: y1 = 0, y2 = 1 or a = 1, b = 0

limitation: negative value must be in format '(' '-' value ')'
            parentheses are necessary in this case

limitation: var*var only for different vars

limitation: in the highest level of expr only one parameter can be unknown

parser ignores commentary of types #, //, /* */
