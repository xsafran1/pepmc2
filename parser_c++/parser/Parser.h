// Generated by Bisonc++ V2.09.03 on Thu, 20 Feb 2014 23:14:29 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
// $insert scanner.h
#include "../scanner/Scanner.h"

#include "../skusobna_trieda.h"

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
	int line_num = 1;
	Skusobna storage;

    public:
        int parse();
	Parser() {}
	Parser(std::istream &in = std::cin, std::ostream &out = std::cout);

	void initializeStorage(Skusobna &st);
	Skusobna& returnStorage();

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner.
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
};


inline void Parser::error(char const *msg)
{
    std::cerr << msg << " at line "<< line_num << " before char "<< d_scanner.column_num << '\n';
}

// $insert lex
inline int Parser::lex()
{
    return d_scanner.lex();
}

// $insert print
inline void Parser::print()
{}

#endif
