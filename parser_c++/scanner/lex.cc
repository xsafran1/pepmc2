// Generated by Flexc++ V1.08.00 on Tue, 04 Mar 2014 23:21:22 +0100

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>

// $insert class_ih
#include "Scanner.ih"


    // s_ranges__: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const ScannerBase::s_ranges__[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
     5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9,10,11,12,13,14,15,16,17,18,18,
    18,18,18,18,18,18,18,18,19,20,21,22,23,23,23,24,25,26,27,28,29,29,30,31,32,
    32,32,33,34,35,36,37,38,39,40,41,42,43,43,43,43,44,45,46,47,48,49,50,50,51,
    52,52,52,52,53,54,55,55,55,56,57,58,59,60,61,62,63,63,64,65,65,65,65,66,66,
    66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
    66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
    66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
    66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
    66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
    66,66,66,66,66,67,
};

    // s_dfa__ contains the rows of *all* DFAs ordered by start state.
    // The enum class StartCondition__ is defined in the baseclass header
    // INITIAL is always 0.
    // Each entry defines the row to transit to if the column's
    // character range was sensed. Row numbers are relative to the
    // used DFA and d_dfaBase__ is set to the first row of the subset to use.
    // The row's final two values are begin and end indices in
    // s_rfc__[] (rule, flags and count), defining the state's rule details
int const ScannerBase::s_dfa__[][71] =
{
    // INITIAL
    {-1, 1, 2,-1,-1,-1, 3,-1, 4,-1, 5, 6, 7, 8, 9,10,-1,11,12,13,
         14,-1,15,-1,16,17,18,16,19,16,20,21,16,16,16,16,22,16,23,24,
         25,16,26,16,27,-1,28,-1,-1,-1,16,16,16,20,16,16,16,16,16,16,
         16,23,24,16,16,16,-1,-1,-1,   0, 0},  // 0
    {-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   0, 1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   1, 2},  // 2
    {-1,-1,-1,-1,-1,-1, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   2, 3},  // 3
    {-1, 4,-1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
          4, 4, 4, 4, 4, 4, 4, 4,-1,   3, 4},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   4, 5},  // 5
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   5, 6},  // 6
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   6, 7},  // 7
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   7, 8},  // 8
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   8, 9},  // 9
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,   9,10},  // 10
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,29,-1,-1,-1,-1,30,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  10,10},  // 11
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,-1,12,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  10,11},  // 12
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  11,12},  // 13
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  12,13},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  13,14},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  14,15},  // 16
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,33,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  15,16},  // 17
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,34,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  16,17},  // 18
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,35,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  17,18},  // 19
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,36,16,16,36,
         16,16,16,16,16,16,-1,-1,-1,  18,19},  // 20
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,37,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  19,20},  // 21
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,38,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  20,21},  // 22
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,39,16,16,39,
         16,16,16,16,16,16,-1,-1,-1,  21,22},  // 23
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,40,16,16,40,
         16,16,16,16,16,16,-1,-1,-1,  22,23},  // 24
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,41,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  23,24},  // 25
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,42,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  24,25},  // 26
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  25,26},  // 27
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  26,27},  // 28
    {-1,29,29,29,29,29,29,29,29,29,29,29,43,29,29,29,29,29,29,29,
         29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
         29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
         29,29,29,29,29,29,29,-1,-1,  27,27},  // 29
    {-1,30,-1,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
         30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
         30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,
         30,30,30,30,30,30,30,30,-1,  27,28},  // 30
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,44,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  28,28},  // 31
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,-1,-1,-1,-1,32,-1,32,32,32,32,32,32,32,32,32,32,
         32,32,32,32,32,32,-1,-1,-1,  28,29},  // 32
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,45,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  29,30},  // 33
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,46,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  30,31},  // 34
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,47,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  31,32},  // 35
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,48,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  32,33},  // 36
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,49,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  33,34},  // 37
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,50,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  34,35},  // 38
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,51,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,52,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  35,36},  // 39
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,54,-1,-1,-1,32,-1,16,16,16,16,55,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  36,37},  // 40
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,56,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  37,38},  // 41
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,57,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  38,39},  // 42
    {-1,29,29,29,29,29,29,29,29,29,29,29,43,29,29,29,29,58,29,29,
         29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
         29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,
         29,29,29,29,29,29,29,-1,-1,  39,39},  // 43
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,44,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  39,40},  // 44
    {-1,59,-1,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
         59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
         59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
         59,59,59,59,59,59,59,59,-1,  40,40},  // 45
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,60,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  40,41},  // 46
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  41,42},  // 47
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
         61,61,61,61,-1,-1,-1,-1,-1,-1,61,61,61,61,61,61,61,61,61,61,
         61,61,61,61,61,61,-1,-1,-1,  42,42},  // 48
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         62,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  42,43},  // 49
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  43,44},  // 50
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
         64,64,64,64,-1,-1,-1,-1,-1,-1,64,64,64,64,64,64,64,64,64,64,
         64,64,64,64,64,64,-1,-1,-1,  44,44},  // 51
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,65,16,
         16,16,16,16,16,16,-1,-1,-1,  44,45},  // 52
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
         66,66,66,66,-1,-1,-1,-1,-1,-1,66,66,66,66,66,66,66,66,66,66,
         66,66,66,66,66,66,-1,-1,-1,  45,45},  // 53
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,67,-1,
         -1,-1,-1,-1,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
         68,68,68,68,-1,-1,-1,-1,-1,-1,68,68,68,68,68,68,68,68,68,68,
         68,68,68,68,68,68,-1,-1,-1,  45,45},  // 54
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,69,16,16,
         16,16,16,16,16,16,-1,-1,-1,  45,46},  // 55
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,70,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  46,47},  // 56
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,71,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  47,48},  // 57
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  48,49},  // 58
    {-1,59,-1,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
         59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
         59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,
         59,59,59,59,59,59,59,59,-1,  49,50},  // 59
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         72,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  50,51},  // 60
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,73,74,-1,-1,74,-1,
         -1,-1,-1,-1,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,
         61,61,61,61,-1,-1,-1,-1,74,-1,61,61,61,61,61,61,61,61,61,61,
         61,61,61,61,61,61,-1,-1,-1,  51,51},  // 61
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,75,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  51,52},  // 62
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,76,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  52,53},  // 63
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,77,78,-1,-1,78,-1,
         -1,-1,-1,-1,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
         64,64,64,64,-1,-1,-1,-1,78,-1,64,64,64,64,64,64,64,64,64,64,
         64,64,64,64,64,64,-1,-1,-1,  53,53},  // 64
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,79,16,
         16,16,16,16,16,16,-1,-1,-1,  53,54},  // 65
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,80,81,-1,-1,81,-1,
         -1,-1,-1,-1,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,
         66,66,66,66,-1,-1,-1,-1,81,-1,66,66,66,66,66,66,66,66,66,66,
         66,66,66,66,66,66,-1,-1,-1,  54,54},  // 66
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,67,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,82,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  54,54},  // 67
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,-1,-1,83,-1,
         -1,-1,-1,-1,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,
         68,68,68,68,-1,-1,82,-1,83,-1,68,68,68,68,68,68,68,68,68,68,
         68,68,68,68,68,68,-1,-1,-1,  54,54},  // 68
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,40,16,-1,-1,-1,  54,55},  // 69
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  55,56},  // 70
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,85,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  56,57},  // 71
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,86,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  57,58},  // 72
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,87,-1,
         -1,-1,-1,-1,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
         88,88,88,88,-1,-1,-1,-1,-1,-1,88,88,88,88,88,88,88,88,88,88,
         88,88,88,88,88,88,-1,-1,-1,  58,58},  // 73
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,73,74,-1,-1,74,-1,
         -1,-1,-1,-1,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
         74,74,74,74,-1,-1,-1,-1,74,-1,74,74,74,74,74,74,74,74,74,74,
         74,74,74,74,74,74,-1,-1,-1,  58,58},  // 74
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  58,59},  // 75
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,89,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  59,60},  // 76
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,90,-1,
         -1,-1,-1,-1,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,
         91,91,91,91,-1,-1,-1,-1,-1,-1,91,91,91,91,91,91,91,91,91,91,
         91,91,91,91,91,91,-1,-1,-1,  60,60},  // 77
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,77,78,-1,-1,78,-1,
         -1,-1,-1,-1,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,
         78,78,78,78,-1,-1,-1,-1,78,-1,78,78,78,78,78,78,78,78,78,78,
         78,78,78,78,78,78,-1,-1,-1,  60,60},  // 78
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,92,16,16,16,16,-1,-1,-1,  60,61},  // 79
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,93,-1,
         -1,-1,-1,-1,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,
         94,94,94,94,-1,-1,-1,-1,-1,-1,94,94,94,94,94,94,94,94,94,94,
         94,94,94,94,94,94,-1,-1,-1,  61,61},  // 80
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,80,81,-1,-1,81,-1,
         -1,-1,-1,-1,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,
         81,81,81,81,-1,-1,-1,-1,81,-1,81,81,81,81,81,81,81,81,81,81,
         81,81,81,81,81,81,-1,-1,-1,  61,61},  // 81
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  61,61},  // 82
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,83,-1,-1,83,-1,
         -1,-1,-1,-1,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,
         83,83,83,83,-1,-1,82,-1,83,-1,83,83,83,83,83,83,83,83,83,83,
         83,83,83,83,83,83,-1,-1,-1,  61,61},  // 83
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,95,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  61,62},  // 84
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  62,63},  // 85
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,96,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  63,64},  // 86
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,-1,98,-1,87,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  64,64},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,99,-1,-1,99,-1,
         -1,-1,-1,-1,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,
         88,88,88,88,-1,-1,-1,-1,99,-1,88,88,88,88,88,88,88,88,88,88,
         88,88,88,88,88,88,-1,-1,-1,  64,64},  // 88
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,32,-1,-1,32,100,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  64,65},  // 89
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,101,-1,102,-1,90,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  65,65},  // 90
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,101,103,-1,-1,103,-1,
         -1,-1,-1,-1,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,
         91,91,91,91,-1,-1,-1,-1,103,-1,91,91,91,91,91,91,91,91,91,91,
         91,91,91,91,91,91,-1,-1,-1,  65,65},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,51,-1,-1,-1,-1,32,-1,-1,32,-1,
         -1,-1,-1,-1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,-1,-1,-1,-1,32,-1,16,16,16,16,16,16,16,16,16,16,
         16,16,16,16,16,16,-1,-1,-1,  65,66},  // 92
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,104,-1,105,-1,93,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  66,66},  // 93
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,104,106,-1,-1,106,-1,
         -1,-1,-1,-1,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,
         94,94,94,94,-1,-1,-1,-1,106,-1,94,94,94,94,94,94,94,94,94,94,
         94,94,94,94,94,94,-1,-1,-1,  66,66},  // 94
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  66,67},  // 95
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  67,68},  // 96
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,
         -1,-1,-1,-1,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,
         108,108,108,108,-1,-1,-1,-1,-1,-1,108,108,108,108,108,108,108,108,108,108,
         108,108,108,108,108,108,-1,-1,-1,  68,68},  // 97
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,109,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  68,68},  // 98
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,99,-1,-1,99,-1,
         -1,-1,-1,-1,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,
         99,99,99,99,-1,-1,-1,-1,99,-1,99,99,99,99,99,99,99,99,99,99,
         99,99,99,99,99,99,-1,-1,-1,  68,68},  // 99
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  68,69},  // 100
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,110,-1,
         -1,-1,-1,-1,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
         111,111,111,111,-1,-1,-1,-1,-1,-1,111,111,111,111,111,111,111,111,111,111,
         111,111,111,111,111,111,-1,-1,-1,  69,69},  // 101
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,112,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 102
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,101,103,-1,-1,103,-1,
         -1,-1,-1,-1,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,
         103,103,103,103,-1,-1,-1,-1,103,-1,103,103,103,103,103,103,103,103,103,103,
         103,103,103,103,103,103,-1,-1,-1,  69,69},  // 103
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,113,-1,
         -1,-1,-1,-1,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
         114,114,114,114,-1,-1,-1,-1,-1,-1,114,114,114,114,114,114,114,114,114,114,
         114,114,114,114,114,114,-1,-1,-1,  69,69},  // 104
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,115,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 105
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,104,106,-1,-1,106,-1,
         -1,-1,-1,-1,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,
         106,106,106,106,-1,-1,-1,-1,106,-1,106,106,106,106,106,106,106,106,106,106,
         106,106,106,106,106,106,-1,-1,-1,  69,69},  // 106
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,116,-1,-1,-1,-1,117,-1,107,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 107
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,116,-1,-1,-1,118,-1,-1,118,-1,
         -1,-1,-1,-1,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,
         108,108,108,108,-1,-1,-1,-1,118,-1,108,108,108,108,108,108,108,108,108,108,
         108,108,108,108,108,108,-1,-1,-1,  69,69},  // 108
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,97,-1,-1,-1,109,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 109
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,119,-1,120,-1,110,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 110
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,119,121,-1,-1,121,-1,
         -1,-1,-1,-1,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,
         111,111,111,111,-1,-1,-1,-1,121,-1,111,111,111,111,111,111,111,111,111,111,
         111,111,111,111,111,111,-1,-1,-1,  69,69},  // 111
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,101,-1,-1,-1,112,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 112
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,122,-1,123,-1,113,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 113
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,122,124,-1,-1,124,-1,
         -1,-1,-1,-1,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,
         114,114,114,114,-1,-1,-1,-1,124,-1,114,114,114,114,114,114,114,114,114,114,
         114,114,114,114,114,114,-1,-1,-1,  69,69},  // 114
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,104,-1,-1,-1,115,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,69},  // 115
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  69,70},  // 116
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,125,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 117
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,116,-1,-1,-1,118,-1,-1,118,-1,
         -1,-1,-1,-1,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,
         118,118,118,118,-1,-1,-1,-1,118,-1,118,118,118,118,118,118,118,118,118,118,
         118,118,118,118,118,118,-1,-1,-1,  70,70},  // 118
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,126,-1,
         -1,-1,-1,-1,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
         127,127,127,127,-1,-1,-1,-1,-1,-1,127,127,127,127,127,127,127,127,127,127,
         127,127,127,127,127,127,-1,-1,-1,  70,70},  // 119
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,128,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 120
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,119,121,-1,-1,121,-1,
         -1,-1,-1,-1,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,
         121,121,121,121,-1,-1,-1,-1,121,-1,121,121,121,121,121,121,121,121,121,121,
         121,121,121,121,121,121,-1,-1,-1,  70,70},  // 121
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,129,-1,
         -1,-1,-1,-1,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
         130,130,130,130,-1,-1,-1,-1,-1,-1,130,130,130,130,130,130,130,130,130,130,
         130,130,130,130,130,130,-1,-1,-1,  70,70},  // 122
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,131,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 123
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,122,124,-1,-1,124,-1,
         -1,-1,-1,-1,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
         124,124,124,124,-1,-1,-1,-1,124,-1,124,124,124,124,124,124,124,124,124,124,
         124,124,124,124,124,124,-1,-1,-1,  70,70},  // 124
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,116,-1,-1,-1,-1,-1,-1,125,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 125
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,132,-1,133,-1,126,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 126
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,132,134,-1,-1,134,-1,
         -1,-1,-1,-1,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
         127,127,127,127,-1,-1,-1,-1,134,-1,127,127,127,127,127,127,127,127,127,127,
         127,127,127,127,127,127,-1,-1,-1,  70,70},  // 127
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,119,-1,-1,-1,128,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 128
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,135,-1,136,-1,129,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 129
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,135,137,-1,-1,137,-1,
         -1,-1,-1,-1,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,
         130,130,130,130,-1,-1,-1,-1,137,-1,130,130,130,130,130,130,130,130,130,130,
         130,130,130,130,130,130,-1,-1,-1,  70,70},  // 130
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,122,-1,-1,-1,131,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 131
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,138,-1,
         -1,-1,-1,-1,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
         139,139,139,139,-1,-1,-1,-1,-1,-1,139,139,139,139,139,139,139,139,139,139,
         139,139,139,139,139,139,-1,-1,-1,  70,70},  // 132
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,140,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 133
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,132,134,-1,-1,134,-1,
         -1,-1,-1,-1,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,
         134,134,134,134,-1,-1,-1,-1,134,-1,134,134,134,134,134,134,134,134,134,134,
         134,134,134,134,134,134,-1,-1,-1,  70,70},  // 134
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,141,-1,
         -1,-1,-1,-1,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
         142,142,142,142,-1,-1,-1,-1,-1,-1,142,142,142,142,142,142,142,142,142,142,
         142,142,142,142,142,142,-1,-1,-1,  70,70},  // 135
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,143,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 136
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,135,137,-1,-1,137,-1,
         -1,-1,-1,-1,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,
         137,137,137,137,-1,-1,-1,-1,137,-1,137,137,137,137,137,137,137,137,137,137,
         137,137,137,137,137,137,-1,-1,-1,  70,70},  // 137
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,144,-1,-1,-1,-1,145,-1,138,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 138
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,144,-1,-1,-1,146,-1,-1,146,-1,
         -1,-1,-1,-1,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,
         139,139,139,139,-1,-1,-1,-1,146,-1,139,139,139,139,139,139,139,139,139,139,
         139,139,139,139,139,139,-1,-1,-1,  70,70},  // 139
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,132,-1,-1,-1,140,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 140
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,147,-1,-1,-1,-1,148,-1,141,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 141
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,147,-1,-1,-1,149,-1,-1,149,-1,
         -1,-1,-1,-1,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,
         142,142,142,142,-1,-1,-1,-1,149,-1,142,142,142,142,142,142,142,142,142,142,
         142,142,142,142,142,142,-1,-1,-1,  70,70},  // 142
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,135,-1,-1,-1,143,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,70},  // 143
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  70,71},  // 144
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,150,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  71,71},  // 145
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,144,-1,-1,-1,146,-1,-1,146,-1,
         -1,-1,-1,-1,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,
         146,146,146,146,-1,-1,-1,-1,146,-1,146,146,146,146,146,146,146,146,146,146,
         146,146,146,146,146,146,-1,-1,-1,  71,71},  // 146
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  71,72},  // 147
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,151,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  72,72},  // 148
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,147,-1,-1,-1,149,-1,-1,149,-1,
         -1,-1,-1,-1,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,
         149,149,149,149,-1,-1,-1,-1,149,-1,149,149,149,149,149,149,149,149,149,149,
         149,149,149,149,149,149,-1,-1,-1,  72,72},  // 149
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,144,-1,-1,-1,-1,-1,-1,150,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  72,72},  // 150
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,147,-1,-1,-1,-1,-1,-1,151,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,  72,72},  // 151
};

    // The first value is the rule index
    // The second value is the FLAG: see the scannerbase.h file
    // 1: Final     4: Count        11: Final/BOL,Inc     
    // 2: Inc.      5: Final,Count  13: Final/BOL,Count
    // 3: Final,Inc 9: Final/BOL    
    // The third value is the LOP count value (valid for Count flags)
size_t const ScannerBase::s_rfc__[][3] =
{
//     R  F  C
     {16, 1, 0},  // 0
     {17, 1, 0},  // 1
     {15, 1, 0},  // 2
     {12, 9, 0},  // 3
     {23, 1, 0},  // 4
     {24, 1, 0},  // 5
     {22, 1, 0},  // 6
     {28, 1, 0},  // 7
     {18, 1, 0},  // 8
     {21, 1, 0},  // 9
     { 0, 1, 0},  // 10
     {20, 1, 0},  // 11
     {19, 1, 0},  // 12
     {27, 1, 0},  // 13
     { 1, 1, 0},  // 14
     { 1, 1, 0},  // 15
     { 1, 1, 0},  // 16
     { 1, 1, 0},  // 17
     { 1, 1, 0},  // 18
     { 1, 1, 0},  // 19
     { 1, 1, 0},  // 20
     { 1, 1, 0},  // 21
     { 1, 1, 0},  // 22
     { 1, 1, 0},  // 23
     { 1, 1, 0},  // 24
     {25, 1, 0},  // 25
     {26, 1, 0},  // 26
     {13, 1, 0},  // 27
     { 1, 1, 0},  // 28
     { 1, 1, 0},  // 29
     { 1, 1, 0},  // 30
     { 1, 1, 0},  // 31
     { 1, 1, 0},  // 32
     { 1, 1, 0},  // 33
     { 1, 1, 0},  // 34
     { 1, 1, 0},  // 35
     { 1, 1, 0},  // 36
     { 1, 1, 0},  // 37
     { 1, 1, 0},  // 38
     { 0, 1, 0},  // 39
     { 1, 1, 0},  // 40
     { 8, 9, 0},  // 41
     { 1, 1, 0},  // 42
     { 1, 1, 0},  // 43
     { 1, 1, 0},  // 44
     { 1, 1, 0},  // 45
     { 1, 1, 0},  // 46
     { 1, 1, 0},  // 47
     {14, 1, 0},  // 48
     {11, 9, 0},  // 49
     { 1, 1, 0},  // 50
     { 1, 1, 0},  // 51
     { 1, 1, 0},  // 52
     { 1, 1, 0},  // 53
     { 1, 1, 0},  // 54
     { 1, 1, 0},  // 55
     { 1, 1, 0},  // 56
     { 1, 1, 0},  // 57
     {10, 9, 0},  // 58
     { 1, 1, 0},  // 59
     { 1, 1, 0},  // 60
     { 1, 1, 0},  // 61
     { 5, 9, 0},  // 62
     { 1, 1, 0},  // 63
     { 1, 1, 0},  // 64
     { 1, 1, 0},  // 65
     { 9, 9, 0},  // 66
     { 7, 9, 0},  // 67
     { 6, 9, 0},  // 68
     { 4, 1, 0},  // 69
     { 2, 1, 0},  // 70
     { 3, 1, 0},  // 71
};

int const (*ScannerBase::s_dfaBase__[])[71] =
{
    s_dfa__ + 0,
};

size_t ScannerBase::s_istreamNr = 0;

// $insert inputImplementation
ScannerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

ScannerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t ScannerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        // FALLING THROUGH

        default:
        return ch;
    }
}

size_t ScannerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                    // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void ScannerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void ScannerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

ScannerBase::ScannerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_startCondition(StartCondition__::INITIAL),
    d_state(0),
    d_out(new std::ostream(out.rdbuf())),
    d_sawEOF(false),
    d_atBOL(true),
    d_tailCount(29, std::numeric_limits<size_t>::max()),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStream__(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_state = 0;
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
    d_sawEOF = false;
    d_atBOL = true;
}


ScannerBase::ScannerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_startCondition(StartCondition__::INITIAL),
    d_state(0),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_sawEOF(false),
    d_atBOL(true),
    d_tailCount(29, std::numeric_limits<size_t>::max()),
    d_input(new std::ifstream(infilename)),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream__(in, 1);
    switchOstream(out);
}


void ScannerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void ScannerBase::setDebug(bool onOff)
{}

bool ScannerBase::debug() const
{
    return false;
}

void ScannerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void ScannerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void ScannerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_sawEOF = false;
    d_atBOL = true;
}

void ScannerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void ScannerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void ScannerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void ScannerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack__)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_sawEOF = false;
    d_atBOL = true;
}


bool ScannerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();
    d_sawEOF = false;

    return true;
}

ScannerBase::ActionType__ ScannerBase::actionType__(size_t range)
{
    d_nextState = d_dfaBase__[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType__::CONTINUE;

    if (atFinalState())                     // FINAL state reached
        return ActionType__::MATCH;

    if (d_matched.size())
        return ActionType__::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF__ ? 
                ActionType__::ECHO_CH 
            : 
                ActionType__::RETURN;
}

void ScannerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

  // The size of d_matched is determined:
  //    The current state is a known final state (as determined by 
  // inspectRFCs__(), just prior to calling matched__). 
  //    The contents of d_matched are reduced to d_final's size or (if set)
  // to the LOP-rule's tail size.
void ScannerBase::determineMatchedSize(FinData const &final)
{
    size_t length = final.matchLen;
    if (final.tailCount != std::numeric_limits<size_t>::max())
        length -= final.tailCount;

    d_input.reRead(d_matched, length);      // reread the tail section
    d_matched.resize(length);               // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule index is returned.
size_t ScannerBase::matched__(size_t ch)
{
    d_input.reRead(ch);

    if (!d_atBOL)
        d_final.atBOL.rule = std::numeric_limits<size_t>::max();

    FinData &final = d_final.atBOL.rule == std::numeric_limits<size_t>::max() ? 
                            d_final.notAtBOL
                        :
                            d_final.atBOL;

    determineMatchedSize(final);

    d_atBOL = *d_matched.rbegin() == '\n';


    return final.rule;
}

size_t ScannerBase::getRange__(int ch)       // using int to prevent casts
{
    if (ch != AT_EOF)
        d_sawEOF = false;

    return ch == AT_EOF ? static_cast<size_t>(s_rangeOfEOF__) : s_ranges__[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match, and LOP counts
  // are updated.
void ScannerBase::continue__(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void ScannerBase::echoCh__(size_t ch)
{
    *d_out << static_cast<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void ScannerBase::echoFirst__(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh__(d_matched[0]);
}

    // Inspect all s_rfc__ elements associated with the current state
    //  If the s_rfc__ element has its COUNT flag set then set the 
    // d_tailCount[rule] value to the element's tailCount value, if it has its 
    // INCREMENT flag set then increment d_tailCount[rule]
    //  If neither was set set the d_tailCount[rule] to numeric_limits<size_t>::max()
    // 
    // If the s_rfc__ element has its FINAL flag set then store the rule number
    // in d_final.second. If it has its FINAL + BOL flags set then store the
    // rule number in d_final.first
void ScannerBase::inspectRFCs__()
{
    for 
    (
        size_t begin = d_dfaBase__[d_state][s_finacIdx__], 
                 end = d_dfaBase__[d_state][s_finacIdx__ + 1];
            begin != end;
                ++begin
    )
    {
        size_t const *rfc = s_rfc__[begin];
        size_t flag = rfc[FLAGS];
        size_t rule = rfc[RULE];

        if (flag & INCREMENT)
            ++d_tailCount[rule];
        else 
            d_tailCount[rule] = (flag & COUNT) ? rfc[ACCCOUNT] : std::numeric_limits<size_t>::max();

        if (flag & FINAL)
        {
            FinData &final = (flag & BOL) ? d_final.atBOL : d_final.notAtBOL;
            final = FinData { rule, d_matched.size(), d_tailCount[rule] };
        }
    }
}

void ScannerBase::reset__()
{
    d_final = Final { {std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max() }, 
                      {std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max(), std::numeric_limits<size_t>::max() } };
    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int Scanner::executeAction__(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 15 "scanner2"
            {
    column_num += length();
    return Parser::NUMBER;
}

        }
        break;
        case 1:
        {
#line 20 "scanner2"
            {
    column_num += length();
    return Parser::NAME;
}

        }
        break;
        case 2:
        {
#line 25 "scanner2"
            {
    column_num += length();
    return Parser::RAMP;
}

        }
        break;
        case 3:
        {
#line 30 "scanner2"
            {
    column_num += length();
    return Parser::SIGM;
}

        }
        break;
        case 4:
        {
#line 35 "scanner2"
            {
    column_num += length();
    return Parser::STEP;
}

        }
        break;
        case 5:
        {
#line 40 "scanner2"
            {
    column_num += length();
    return Parser::VAR_LINE;
}

        }
        break;
        case 6:
        {
#line 44 "scanner2"
            {
    column_num += length();
    return Parser::PARAM_LINE;
}

        }
        break;
        case 7:
        {
#line 48 "scanner2"
            {
    column_num += length();
    return Parser::CONST_LINE;
}

        }
        break;
        case 8:
        {
#line 52 "scanner2"
            {
    column_num += length();
    return Parser::EQ_LINE;
}

        }
        break;
        case 9:
        {
#line 56 "scanner2"
            {
    column_num += length();
    return Parser::THRES_LINE;
}

        }
        break;
        case 10:
        {
#line 60 "scanner2"
            {
    column_num += length();
    return Parser::INIT_LINE;
}

        }
        break;
        case 11:
        {
#line 64 "scanner2"
            {
    column_num += length();
    return Parser::BA_LINE;
}

        }
        break;
        case 15:
        {
#line 74 "scanner2"
            { column_num += length(); } 

        }
        break;
        case 16:
        {
#line 75 "scanner2"
            { column_num += length(); } 

        }
        break;
        case 17:
        {
#line 77 "scanner2"
            return '\n';

        }
        break;
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        {
#line 89 "scanner2"
            {
    column_num += length();
    return (int) (matched()[0]);
}

        }
        break;
    }
    noReturn__();
    return 0;
}
catch (Leave__ value)
{
    return static_cast<int>(value);
}

int Scanner::lex__()
{
    reset__();
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        size_t range = getRange__(ch);      // determine the range

        inspectRFCs__();                    // update d_tailCount values

        switch (actionType__(range))        // determine the action
        {
            case ActionType__::CONTINUE:
                continue__(ch);
            continue;

            case ActionType__::MATCH:
            {
                d_token__ = executeAction__(matched__(ch));
                if (return__())
                {
                    print();
                    postCode(PostEnum__::RETURN);
                    return d_token__;
                }
                break;
            }

            case ActionType__::ECHO_FIRST:
                echoFirst__(ch);
            break;

            case ActionType__::ECHO_CH:
                echoCh__(ch);
            break;

            case ActionType__::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum__::END);
                     return 0;
                }
                postCode(PostEnum__::POP);
             continue;
        } // switch

        postCode(PostEnum__::WIP);

        reset__();
        preCode();
    } // while
}

void ScannerBase::print__() const
{
}


